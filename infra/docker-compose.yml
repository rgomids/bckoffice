version: "3.9"

services:
  db:
    image: postgres:16
    container_name: rcm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-rcm}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rcm_pass}
      POSTGRES_DB: ${POSTGRES_DB:-rcm_backoffice}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: rcm-backend
    depends_on:
      - db
    environment:
      DB_DSN: "postgres://${POSTGRES_USER:-rcm}:${POSTGRES_PASSWORD:-rcm_pass}@db:5432/${POSTGRES_DB:-rcm_backoffice}?sslmode=disable"
      PORT: 8080
    ports:
      - "8080:8080"

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: rcm-frontend
    depends_on:
      - backend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development

  backup:
    image: minio/mc
    container_name: rcm-backup
    entrypoint: ["/bin/sh","-c","echo '0 3 * * * /scripts/pg_dump.sh' > /etc/crontabs/root && crond -f"]
    volumes:
      - ./backup/pg_dump.sh:/scripts/pg_dump.sh:ro
      - ./backup:/backup
    environment:
      - PGUSER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGHOST=db
      - PGDATABASE=${POSTGRES_DB}
      - MINIO_BUCKET=rcm-backup
      - MC_HOST_minio=http://minioadmin:minioadmin@minio:9000
    restart: unless-stopped
    depends_on:
      - db
      - minio

volumes:
  db_data:

networks:
  default:
    name: rcm.backoffice.network